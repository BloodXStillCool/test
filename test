_G.Code = "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"	    
	    _G.Build = [[	    function FirB()
	    	    end
	    	    function BirchB()
	    	    end
	    	    function CherryB()
	    	    end
	    	    function WalnutB()
	    	    end
	    	    function GenericB()
	    	    end
	    	    function OakB()
	    	    end
	    	    function PineB()
	    	    end
	    	    function PalmB()
	    	    end
	    	    function KoaB()
	    	    end
	    	    function VolcanoB()
	    	    end
	    	    function GreenSwampyB()
	    	    end
	    	    function GoldSwampyB()
	    	    end
	    	    function SnowGlowB()
	    	    end
	    	    function FrostB()
	    	    end
	    	    function CaveCrawlerB()
	    	    end
	    	    function LoneCaveB()
	    	    end
	    	    function SpookyB()
	    	    end
	    	    function SpookyNeonB()
	    	    end
	    	    function  BlueSpruceB()
	    	    end
	    	    
	    	    function GlassPaneB()
	    	    end
	    	    function GlassPane2B()
	    	    end
	    	    function GlassPane3B()
	    	    end
	    	    function GlassPane4B()
	    	    end
	    	    function GlassDoorB()
	    	    end
	    	    function Sawmill1B()
	    	    end
	    	    function Sawmill2B()
	    	    end
	    	    function Sawmill3B()
	    	    end
	    	    function Sawmill4B()
	    	    end
	    	    function Sawmill5B()
	    	    end
	    	    function Painting1B()
	    	    end
	    	    function Painting2B()
	    	    end
	    	    function Painting3B()
	    	    end
	    	    function Painting4B()
	    	    end
	    	    function Painting5B()
	    	    end
	    	    function Painting6B()
	    	    end
	    	    function Painting7B()
	    	    end
	    	    function Painting8B()
	    	    end
	    	    function Painting9B()
	    	    end
	    	    function Painting10B()
	    	    end
	    	    function Painting11B()
	    	    end
	    	    function Painting12B()
	    	    end
	    	    function Lamp1B()
	    	    end
	    	    function FloorLamp1B()
	    	    end
	    	    function WallLight1B()
	    	    end
	    	    function WallLight2B()
	    	    end
	    	    function CouchB()
	    	    end
	    	    function Chair1B()
	    	    end
	    	    function Chair2B()
	    	    end
	    	    function Bed1B()
	    	    end
	    	    function Bed2B()
	    	    end
	    	    function ToiletB()
	    	    end
	    	    function ToiletGoldB()
	    	    end
	    	    function StoveB()
	    	    end
	    	    function DishwasherB()
	    	    end
	    	    function fridgeB()
	    	    end
	    	    function StraightConveyorB()
	    Shs('StraightConveyor',Tag*Ang(-3.1415927410125732, 0, -3.1415927410125732) + Vec(5.892303466796875, 0.7442673444747925, 59.788909912109375))	Wait(1)
	
		    end
	    	    function TightTurnConveyorB()
	    Shs('TightTurnConveyor',Tag*Ang(0, 1.5707963705062866, 0) + Vec(12.892364501953125, 0.7442396879196167, 59.788604736328125))	Wait(1)
	
		    end
	    	    function TiltConveyorB()
	    Shs('TiltConveyor',Tag*Ang(-0, 0, -0) + Vec(0.892303466796875, 0.744165301322937, 59.888763427734375))	Wait(1)
	
		    end
	    	    function ConveyorFunnelB()
	    Shs('ConveyorFunnel',Tag*Ang(-3.1415927410125732, 0, -3.1415927410125732) + Vec(-4.107635498046875, 0.7442673444747925, 59.788665771484375))	Wait(1)
	
		    end
	    	    function ConveyorSwitchB()
	    Shs('ConveyorSwitch',Tag*Ang(-0, 0, -0) + Vec(-11.107696533203125, 0.7442492246627808, 59.788543701171875))	Wait(1)
	
		    end
	    	    function LogSweeperB()
	    Shs('LogSweeper',Tag*Ang(-0, 0, -0) + Vec(-20.107696533203125, 0.644271731376648, 59.588714599609375))	Wait(1)
	
		    end
	    	    function StraightSwitchConveyorRightB()
	    Shs('StraightSwitchConveyorRight',Tag*Ang(-3.1415927410125732, 0, -3.1415927410125732) + Vec(3.892303466796875, 0.7442673444747925, 49.788909912109375))	Wait(1)
	
		    end
	    	    function StraightSwitchConveyorLeftB()
	    Shs('StraightSwitchConveyorLeft',Tag*Ang(-3.1415927410125732, 0, -3.1415927410125732) + Vec(-6.107696533203125, 0.7442673444747925, 49.788909912109375))	Wait(1)
	
		    end
	    	    function Pickup1B()
	    Shs('Pickup1',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-55.70770263671875, 0.19999970495700836, 86.88890075683594))	Wait(1)
	
		    end
	    	    function UtilityTruck2B()
	    Shs('UtilityTruck2',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-53.70770263671875, 0.19999970495700836, 72.88890075683594))	Wait(1)
	
		    end
	    	    function UtilityTruckB()
	    Shs('UtilityTruck',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-53.70770263671875, 0.19999970495700836, 59.88890075683594))	Wait(1)
	
		    end
	    	    function Trailer2B()
	    Shs('Trailer2',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-53.70770263671875, 0.19999970495700836, 46.88890075683594))	Wait(1)
	
		    end
	    	    function SleighB()
	    Shs('Sleigh',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-52.70770263671875, 0.19999970495700836, 33.88890075683594))	Wait(1)
	
		    end
	    	    function SnowmobileB()
	    Shs('Snowmobile',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-52.70770263671875, 0.19999970495700836, 22.888900756835938))	Wait(1)
	
		    end
	    	    function SmallTrailerB()
	    Shs('SmallTrailer',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-70.70770263671875, 0.19999970495700836, 33.88890075683594))	Wait(1)
	
		    end
	    	    function ChopSawB()
	    Shs('ChopSaw',Tag*Ang(-3.1415927410125732, 0, -3.1415927410125732) + Vec(5.892303466796875, 1.7442654371261597, 74.28890991210938))	Wait(1)
	
		    end
	    	    function FireworkLauncherB()
	    Shs('FireworkLauncher',Tag*Ang(-0, 0, -0) + Vec(-0.107666015625, 0.7442673444747925, 76.78871154785156))	Wait(1)
	
		    end
	    	    function WoodCheckerB()
	    Shs('WoodChecker',Tag*Ang(-3.1415927410125732, 0, -3.1415927410125732) + Vec(-6.107635498046875, 0.7442673444747925, 76.28866577148438))	Wait(1)
	
		    end
	    	    function LaserB()
	    Shs('Laser',Tag*Ang(-0, 0, -0) + Vec(-5.607666015625, 0.7442673444747925, 72.78872680664062))	Wait(1)
	
		    end
	    	    function LaserReceiverB()
	    Shs('LaserReceiver',Tag*Ang(-3.1415927410125732, 0, -3.1415927410125732) + Vec(-5.607666015625, 0.7442673444747925, 68.78866577148438))	Wait(1)
	
		    end
	    	    function GateNOTB()
	    Shs('GateNOT',Tag*Ang(-0, 0, -0) + Vec(-10.107666015625, 0.7442673444747925, 77.28872680664062))	Wait(1)
	
		    end
	    	    function GateORB()
	    Shs('GateOR',Tag*Ang(-0, 0, -0) + Vec(-10.107666015625, 0.7442673444747925, 73.78872680664062))	Wait(1)
	
		    end
	    	    function GateANDB()
	    Shs('GateAND',Tag*Ang(-0, 0, -0) + Vec(-10.107666015625, 0.7442673444747925, 70.78872680664062))	Wait(1)
	
		    end
	    	    function GateXORB()
	    Shs('GateXOR',Tag*Ang(-0, 0, -0) + Vec(-10.107666015625, 0.7442673444747925, 67.78872680664062))	Wait(1)
	
		    end
	    	    function SignalSustainB()
	    Shs('SignalSustain',Tag*Ang(-0, 0, -0) + Vec(-14.107666015625, 0.7442673444747925, 76.78872680664062))	Wait(1)
	
		    end
	    	    function SignalDelayB()
	    Shs('SignalDelay',Tag*Ang(-0, 0, -0) + Vec(-14.107666015625, 0.7442673444747925, 73.78872680664062))	Wait(1)
	
		    end
	    	    function ClockSwitchB()
	    Shs('ClockSwitch',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-19.107696533203125, 0.7442673444747925, 82.58883666992188))	Wait(1)
	
		    end
	    	    function PressurePlateB()
	    Shs('PressurePlate',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-19.107696533203125, 0.7442673444747925, 75.78890991210938))	Wait(1)
	
		    end
	    	    function HatchB()
	    Shs('Hatch',Tag*Ang(-0, -1.5707963705062866, 0) + Vec(-19.107696533203125, 1.1442631483078003, 70.78890991210938))	Wait(1)
	
		    end
	    	    function Lever0B()
	    Shs('Lever0',Tag*Ang(-3.1415927410125732, 0, -3.1415927410125732) + Vec(-25.107696533203125, 0.7442673444747925, 77.28890991210938))	Wait(1)
	
		    end
	    	    function Button0B()
	    Shs('Button0',Tag*Ang(-3.1415927410125732, 0, -3.1415927410125732) + Vec(-25.107696533203125, 0.7442673444747925, 74.28890991210938))	Wait(1)
	
		    end
	    	    local NotifyLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))()
	    local Notify = NotifyLibrary.Notify
	    function Noti(a, b, c)
	    NotifyLibrary.Notify({
	    Title = a,
	    Description = b,
	    Duration = c
	    })
	    end
	   	local FirPlanksBase = 0
	local BirchPlanksBase = 0
	local CherryPlanksBase = 0
	local WalnutPlanksBase = 0
	local GenericPlanksBase = 0
	local OakPlanksBase = 0
	local PinePlanksBase = 0
	local PalmPlanksBase = 0
	local KoaPlanksBase = 0
	local VolcanoPlanksBase = 0
	local GreenSwampyPlanksBase = 0
	local GoldSwampyPlanksBase = 0
	local SnowGlowPlanksBase = 0
	local FrostPlanksBase = 0
	local CaveCrawlerPlanksBase = 0
	local LoneCavePlanksBase = 0
	local SpookyPlanksBase = 0
	local SpookyNeonPlanksBase = 0
	local BlueSprucePlanksBase = 0
	local GlassPaneBase = 0
	local GlassPane2Base = 0
	local GlassPane3Base = 0
	local GlassPane4Base = 0
	local GlassDoorBase = 0
	local Sawmill1Base = 0
	local Sawmill2Base = 0
	local Sawmill3Base = 0
	local Sawmill4Base = 0
	local Sawmill5Base = 0
	local Painting1Base = 0
	local Painting2Base = 0
	local Painting3Base = 0
	local Painting4Base = 0
	local Painting5Base = 0
	local Painting6Base = 0
	local Painting7Base = 0
	local Painting8Base = 0
	local Painting9Base = 0
	local Painting10Base = 0
	local Painting11Base = 0
	local Painting12Base = 0
	local Lamp1Base = 0
	local FloorLamp1Base = 0
	local WallLight1Base = 0
	local WallLight2Base = 0
	local CouchBase = 0
	local Chair1Base = 0
	local Chair2Base = 0
	local Bed1Base = 0
	local Bed2Base = 0
	local ToiletBase = 0
	local ToiletGoldBase = 0
	local StoveBase = 0
	local DishwasherBase = 0
	local FridgeBase = 0
	local StraightConveyorBase = 0
	local TightTurnConveyorBase = 0
	local TiltConveyorBase = 0
	local ConveyorFunnelBase = 0
	local ConveyorSwitchBase = 0
	local LogSweeperBase = 0
	local StraightSwitchConveyorRightBase = 0
	local StraightSwitchConveyorLeftBase = 0
	local Pickup1Base = 0
	local UtilityTruck2Base = 0
	local UtilityTruckBase = 0
	local Trailer2Base = 0
	local SleighBase = 0
	local SnowmobileBase = 0
	local SmallTrailerBase = 0
	local ChopSawBase = 0
	local FireworkLauncherBase = 0
	local WoodCheckerBase = 0
	local LaserBase = 0
	local LaserReceiverBase = 0
	local GateNOTBase = 0
	local GateORBase = 0
	local GateANDBase = 0
	local GateXORBase = 0
	local SignalSustainBase = 0
	local SignalDelayBase = 0
	local ClockSwitchBase = 0
	local PressurePlateBase = 0
	local HatchBase = 0
	local Lever0Base = 0
	local Button0Base = 0
	
	
	function reset()
	FirPlanksBase = 0
	BirchPlanksBase = 0
	CherryPlanksBase = 0
	WalnutPlanksBase = 0
	GenericPlanksBase = 0
	OakPlanksBase = 0
	PinePlanksBase = 0
	PalmPlanksBase = 0
	KoaPlanksBase = 0
	VolcanoPlanksBase = 0
	GreenSwampyPlanksBase = 0
	GoldSwampyPlanksBase = 0
	SnowGlowPlanksBase = 0
	FrostPlanksBase = 0
	CaveCrawlerPlanksBase = 0
	LoneCavePlanksBase = 0
	SpookyPlanksBase = 0
	SpookyNeonPlanksBase = 0
	BlueSprucePlanksBase = 0
	GlassPaneBase = 0
	GlassPane2Base = 0
	GlassPane3Base = 0
	GlassPane4Base = 0
	GlassDoorBase = 0
	Sawmill1Base = 0
	Sawmill2Base = 0
	Sawmill3Base = 0
	Sawmill4Base = 0
	Sawmill5Base = 0
	Painting1Base = 0
	Painting2Base = 0
	Painting3Base = 0
	Painting4Base = 0
	Painting5Base = 0
	Painting6Base = 0
	Painting7Base = 0
	Painting8Base = 0
	Painting9Base = 0
	Painting10Base = 0
	Painting11Base = 0
	Painting12Base = 0
	Lamp1Base = 0
	FloorLamp1Base = 0
	WallLight1Base = 0
	WallLight2Base = 0
	CouchBase = 0
	Chair1Base = 0
	Chair2Base = 0
	Bed1Base = 0
	Bed2Base = 0
	ToiletBase = 0
	ToiletGoldBase = 0
	StoveBase = 0
	DishwasherBase = 0
	FridgeBase = 0
	StraightConveyorBase = 0
	TightTurnConveyorBase = 0
	TiltConveyorBase = 0
	ConveyorFunnelBase = 0
	ConveyorSwitchBase = 0
	LogSweeperBase = 0
	StraightSwitchConveyorRightBase = 0
	StraightSwitchConveyorLeftBase = 0
	Pickup1Base = 0
	UtilityTruck2Base = 0
	UtilityTruckBase = 0
	Trailer2Base = 0
	SleighBase = 0
	SnowmobileBase = 0
	SmallTrailerBase = 0
	ChopSawBase = 0
	FireworkLauncherBase = 0
	WoodCheckerBase = 0
	LaserBase = 0
	LaserReceiverBase = 0
	GateNOTBase = 0
	GateORBase = 0
	GateANDBase = 0
	GateXORBase = 0
	SignalSustainBase = 0
	SignalDelayBase = 0
	ClockSwitchBase = 0
	PressurePlateBase = 0
	HatchBase = 0
	Lever0Base = 0
	end
	            
	function WoodChecker()
	reset()
	for i, v in next, workspace.PlayerModels:GetChildren() do
	if string.find(v.Name, "Plank") then
	if v:FindFirstChild("Owner") then
	if v.Owner.Value == game.Players[WoodBase] then
	
	if v.TreeClass.Value == "Fir" then
	FirPlanksBase = FirPlanksBase + 1
	end
	
	if v.TreeClass.Value == "Birch" then
	BirchPlanksBase = BirchPlanksBase + 1
	end
	    
	if v.TreeClass.Value == "Cherry" then
	CherryPlanksBase = CherryPlanksBase + 1
	end
	
	if v.TreeClass.Value == "Walnut" then
	WalnutPlanksBase = WalnutPlanksBase + 1
	end
	
	if v.TreeClass.Value == "Generic" then
	GenericPlanksBase = GenericPlanksBase + 1
	end
	    
	if v.TreeClass.Value == "Oak" then
	OakPlanksBase = OakPlanksBase + 1
	end
	
	if v.TreeClass.Value == "Pine" then
	PinePlanksBase = PinePlanksBase + 1
	end
	
	if v.TreeClass.Value == "Palm" then
	PalmPlanksBase = PalmPlanksBase + 1
	end
	    
	if v.TreeClass.Value == "Koa" then
	KoaPlanksBase = KoaPlanksBase + 1
	end
	
	if v.TreeClass.Value == "Volcano" then
	VolcanoPlanksBase = VolcanoPlanksBase + 1
	end
	
	if v.TreeClass.Value == "GreenSwampy" then
	GreenSwampyPlanksBase = GreenSwampyPlanksBase + 1
	end
	    
	if v.TreeClass.Value == "GoldSwampy" then
	GoldSwampyPlanksBase = GoldSwampyPlanksBase + 1
	end
	
	if v.TreeClass.Value == "SnowGlow" then
	SnowGlowPlanksBase = SnowGlowPlanksBase + 1
	end
	
	if v.TreeClass.Value == "Frost" then
	FrostPlanksBase = FrostPlanksBase + 1
	end
	
	if v.TreeClass.Value == "CaveCrawler" then
	CaveCrawlerPlanksBase = CaveCrawlerPlanksBase + 1
	end
	
	if v.TreeClass.Value == "LoneCave" then
	LoneCavePlanksBase = LoneCavePlanksBase + 1
	end
	
	if v.TreeClass.Value == "Spooky" then
	SpookyPlanksBase = SpookyPlanksBase + 1
	end
	
	if v.TreeClass.Value == "SpookyNeon" then
	SpookyNeonPlanksBase = SpookyNeonPlanksBase + 1
	end
	
	if v.TreeClass.Value == "BlueSpruce" then
	BlueSprucePlanksBase = BlueSprucePlanksBase + 1
	end
	        
	end
	end
	end
	end
	
	for i, v in next, workspace.PlayerModels:GetChildren() do
	if v:FindFirstChild("Owner") then
	if v.Owner.Value == game.Players[WoodBase] then
	
	if v.ItemName.Value == "GlassPane1" then
	GlassPaneBase = GlassPaneBase + 1
	end
	
	if v.ItemName.Value == "GlassPane2" then
	GlassPane2Base = GlassPane2Base + 1
	end
	
	if v.ItemName.Value == "GlassPane3" then
	GlassPane3Base = GlassPane3Base + 1
	end
	
	if v.ItemName.Value == "GlassPane4" then
	GlassPane4Base = GlassPane4Base + 1
	end
	
	if v.ItemName.Value == "GlassDoor1" then
	GlassDoorBase = GlassDoorBase + 1
	end
	
	end
	end
	end
	end
	
	
	local DiscordLib = loadstring(game:HttpGet "https://raw.githubusercontent.com/666TranZit666/rewrite/main/Dazed%20Lib")()
	    
	local win = DiscordLib:Window("Auto Build GUI")
	
	local ABCredits = win:Server("Credits", "rbxassetid://6035145364")
	
	local Credits = ABCredits:Channel("Credits")
	
	Credits:Button(
	"Credits: Skripter: dazed.and_confused",
	function()
	DiscordLib:Notification("Notification", "Discord: dazed.and_confused", "Okay!")
	end)
	
	Credits:Seperator()
	
	Credits:Button(
	"Credits: Idea: ihateschool",
	function()
	DiscordLib:Notification("Notification", "Discord: ihateschool", "Okay!")
	end)
	
	local ABInfo = win:Server("INFO", "rbxassetid://6035145364")
	
	local Info = ABInfo:Channel("INFO")
	
	Info:Label("To Auto Build You Must\nOwn ALL Blueprints And Have Enough Wood")
	
	Info:Label("The Power Of Ease Is Also\nVERY MUCH RECOMMENDED To Build")
	
	Info:Label("Before Starting The Auto Build Scroll Down To The Bottom\nAnd Select A Wood Base Then Click Load Wood Counter")
	
	local ABFir = win:Server("Fir", "rbxassetid://13612122238")
	
	local Fir = ABFir:Channel("Fir")
	
	Fir:Button(
	"AutoBuild Fir",
	function()
	FirB()
	Noti("Auto Build", "Done Building With Fir", 25)
	end
	)
	
	Fir:Label("Planks Need For This Build: "..FirC)
	
	local FirPlank = Fir:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABBirch = win:Server("Birch", "rbxassetid://13612129258")
	
	local Birch = ABBirch:Channel("Birch")
	
	Birch:Button(
	"AutoBuild Birch",
	function()
	BirchB()
	Noti("Auto Build", "Done Building With Birch", 25)
	end
	)
	
	Birch:Label("Planks Need For This Build: "..BirchC)
	
	local BirchPlank = Birch:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABCherry = win:Server("Cherry", "rbxassetid://13612126588")
	
	local Cherry = ABCherry:Channel("Cherry")
	
	Cherry:Button(
	"AutoBuild Cherry",
	function()
	CherryB()
	Noti("Auto Build", "Done Building With Cherry", 25)
	end
	)
	
	Cherry:Label("Planks Need For This Build: "..CherryC)
	
	local CherryPlank = Cherry:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABWalnut = win:Server("Walnut", "rbxassetid://13612105819")
	
	local Walnut = ABWalnut:Channel("Walnut")
	
	Walnut:Button(
	"AutoBuild Walnut",
	function()
	WalnutB()
	Noti("Auto Build", "Done Building With Walnut", 25)
	end
	)
	
	Walnut:Label("Planks Need For This Build: "..WalnutC)
	
	local WalnutPlank = Walnut:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABGeneric = win:Server("Generic", "rbxassetid://13612116149")
	
	local Generic = ABGeneric:Channel("Generic")
	
	Generic:Button(
	"AutoBuild Generic",
	function()
	GenericB()
	Noti("Auto Build", "Done Building With Generic", 25)
	end
	)
	
	Generic:Label("Planks Need For This Build: "..GenericC)
	
	local GenericPlank = Generic:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABOak = win:Server("Oak", "rbxassetid://13612123108")
	
	local Oak = ABOak:Channel("Oak")
	
	Oak:Button(
	"AutoBuild Oak",
	function()
	OakB()
	Noti("Auto Build", "Done Building With Oak", 25)
	end
	)
	
	Oak:Label("Planks Need For This Build: "..OakC)
	
	local OakPlank = Oak:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABPine = win:Server("Pine", "rbxassetid://13612112499")
	
	local Pine = ABPine:Channel("Pine")
	
	Pine:Button(
	"AutoBuild Pine",
	function()
	PineB()
	Noti("Auto Build", "Done Building With Pine", 25)
	end
	)
	
	Pine:Label("Planks Need For This Build: "..PineC)
	
	local PinePlank = Pine:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABPalm = win:Server("Palm", "rbxassetid://13612115039")
	
	local Palm = ABPalm:Channel("Palm")
	
	Palm:Button(
	"AutoBuild Palm",
	function()
	PalmB()
	Noti("Auto Build", "Done Building With Palm", 25)
	end
	)
	
	Palm:Label("Planks Need For This Build: "..PalmC)
	
	local PalmPlank = Palm:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABKoa = win:Server("Koa", "rbxassetid://13612118027")
	
	local Koa = ABKoa:Channel("Koa")
	
	Koa:Button(
	"AutoBuild Koa",
	function()
	KoaB()
	Noti("Auto Build", "Done Building With Koa", 25)
	end
	)
	
	Koa:Label("Planks Need For This Build: "..KoaC)
	
	local KoaPlank = Koa:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABVolcano = win:Server("Volcano", "rbxassetid://13612117216")
	
	local Volcano = ABVolcano:Channel("Volcano")
	
	Volcano:Button(
	"AutoBuild Volcano",
	function()
	VolcanoB()
	Noti("Auto Build", "Done Building With Volcano", 25)
	end
	)
	
	Volcano:Label("Planks Need For This Build: "..VolcanoC)
	
	local VolcanoPlank = Volcano:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABGreenSwampy = win:Server("GreenSwampy", "rbxassetid://13612104843")
	
	local GreenSwampy = ABGreenSwampy:Channel("GreenSwampy")
	
	GreenSwampy:Button(
	"AutoBuild GreenSwampy",
	function()
	GreenSwampyB()
	Noti("Auto Build", "Done Building With GreenSwampy", 25)
	end
	)
	
	GreenSwampy:Label("Planks Need For This Build: "..GreenSwampyC)
	
	local GreenSwampyPlank = GreenSwampy:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABGoldSwampy = win:Server("GoldSwampy", "rbxassetid://13612118685")
	
	local GoldSwampy = ABGoldSwampy:Channel("GoldSwampy")
	
	GoldSwampy:Button(
	"AutoBuild GoldSwampy",
	function()
	GoldSwampyB()
	Noti("Auto Build", "Done Building With GoldSwampy", 25)
	end
	)
	
	GoldSwampy:Label("Planks Need For This Build: "..GoldSwampyC)
	
	local GoldSwampyPlank = GoldSwampy:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABSnowGlow = win:Server("SnowGlow", "rbxassetid://13612110685")
	
	local SnowGlow = ABSnowGlow:Channel("SnowGlow")
	
	SnowGlow:Button(
	"AutoBuild SnowGlow",
	function()
	SnowGlowB()
	Noti("Auto Build", "Done Building With SnowGlow", 25)
	end
	)
	
	SnowGlow:Label("Planks Need For This Build: "..SnowGlowC)
	
	local SnowGlowPlank = SnowGlow:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABFrost = win:Server("Frost", "rbxassetid://13612119504")
	
	local Frost = ABFrost:Channel("Frost")
	
	Frost:Button(
	"AutoBuild Frost",
	function()
	FrostB()
	Noti("Auto Build", "Done Building With Frost", 25)
	end
	)
	
	Frost:Label("Planks Need For This Build: "..FrostC)
	
	local FrostPlank = Frost:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABCaveCrawler = win:Server("CaveCrawler", "rbxassetid://13612127171")
	
	local CaveCrawler = ABCaveCrawler:Channel("CaveCrawler")
	
	CaveCrawler:Button(
	"AutoBuild CaveCrawler",
	function()
	CaveCrawlerB()
	Noti("Auto Build", "Done Building With CaveCrawler", 25)
	end
	)
	
	CaveCrawler:Label("Planks Need For This Build: "..CaveCrawlerC)
	
	local CaveCrawlerPlank = CaveCrawler:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABLoneCave = win:Server("LoneCave", "rbxassetid://13612113132")
	
	local LoneCave = ABLoneCave:Channel("LoneCave")
	
	LoneCave:Button(
	"AutoBuild LoneCave",
	function()
	LoneCaveB()
	Noti("Auto Build", "Done Building With LoneCave", 25)
	end
	)
	
	LoneCave:Label("Planks Need For This Build: "..LoneCaveC)
	
	local PLoneCavePlank = LoneCave:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABSpooky = win:Server("Spooky", "rbxassetid://13612106782")
	
	local Spooky = ABSpooky:Channel("Spooky")
	
	Spooky:Button(
	"AutoBuild Spooky",
	function()
	SpookyB()
	Noti("Auto Build", "Done Building With Spooky", 25)
	end
	)
	
	Spooky:Label("Planks Need For This Build: "..SpookyC)
	
	local SpookyPlank = Spooky:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABSpookyNeon = win:Server("SpookyNeon", "rbxassetid://13612111603")
	
	local SpookyNeon = ABSpookyNeon:Channel("SpookyNeon")
	
	SpookyNeon:Button(
	"AutoBuild SpookyNeon",
	function()
	SpookyNeonB()
	Noti("Auto Build", "Done Building With SpookyNeon", 25)
	end
	)
	
	SpookyNeon:Label("Planks Need For This Build: "..SpookyNeonC)
	
	local SpookyNeonPlank = SpookyNeon:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABBlueSpruce = win:Server("SpookyNeon", "rbxassetid://15695156984")
	
	local BlueSpruce = ABBlueSpruce:Channel("BlueSpruce")
	
	BlueSpruce:Button(
	"AutoBuild BlueSpruce",
	function()
	BlueSpruceB()
	Noti("Auto Build", "Done Building With BlueSpruce", 25)
	end
	)
	
	BlueSpruce:Label("Planks Need For This Build: "..BlueSpruceC)
	
	local BlueSprucePlank = BlueSpruce:Dropdown(
	"Current Planks On Base",
	{0},
	function()
	end)
	
	local ABGlass = win:Server("Glass", "")
	
	local Glass = ABGlass:Channel("Glass")
	
	Glass:Button(
	"AutoBuild GlassPane",
	function()
	GlassPaneB()
	Noti("Auto Build", "Done Building With GlassPane", 25)
	end
	)
	
	Glass:Label("GlassPane Need For This Build: "..GlassPaneC)
	
	local GlassCound = Glass:Dropdown(
	"Current GlassPane On Base",
	{0},
	function()
	end)
	
	Glass:Seperator()
	
	Glass:Button(
	"AutoBuild GlassPane2",
	function()
	GlassPane2B()
	Noti("Auto Build", "Done Building With GlassPane2", 25)
	end
	)
	
	Glass:Label("GlassPane2 Need For This Build: "..GlassPane2C)
	
	local Glass2Cound = Glass:Dropdown(
	"Current GlassPane2 On Base",
	{0},
	function()
	end)
	
	Glass:Seperator()
	
	Glass:Button(
	"AutoBuild GlassPane3",
	function()
	GlassPane3B()
	Noti("Auto Build", "Done Building With GlassPane3", 25)
	end
	)
	
	Glass:Label("GlassPane3 Need For This Build: "..GlassPane3C)
	
	local Glass3Cound = Glass:Dropdown(
	"Current GlassPane3 On Base",
	{0},
	function()
	end)
	
	Glass:Seperator()
	
	Glass:Button(
	"AutoBuild GlassPane4",
	function()
	GlassPane4B()
	Noti("Auto Build", "Done Building With GlassPane4", 25)
	end
	)
	
	Glass:Label("GlassPane4 Need For This Build: "..GlassPane4C)
	
	local Glass4Cound = Glass:Dropdown(
	"Current GlassPane4 On Base",
	{0},
	function()
	end)
	
	Glass:Seperator()
	
	Glass:Button(
	"AutoBuild GlassDoor1",
	function()
	GlassDoorB()
	Noti("Auto Build", "Done Building With GlassDoor1", 25)
	end
	)
	
	Glass:Label("GlassDoor1 Need For This Build: "..GlassDoor1C)
	
	local GlassDoorCound = Glass:Dropdown(
	"Current GlassDoor1 On Base",
	{0},
	function()
	end)
	
	
	
	local ABSawmill = win:Server("Sawmill", "")
	
	local Sawmill = ABSawmill:Channel("Sawmill")
	
	
	
	Sawmill:Button(
	"AutoBuild Sawmill",
	function()
	Sawmill1B()
	Noti("Auto Build", "Done Building With Sawmill", 25)
	end
	)
	
	Sawmill:Label("Sawmill Need For This Build: "..Sawmill1C)
	
	local SawmillCound = Sawmill:Dropdown(
	"Current Sawmill On Base",
	{0},
	function()
	end)
	
	Sawmill:Seperator()
	
	Sawmill:Button(
	"AutoBuild Sawmill2",
	function()
	Sawmill2B()
	Noti("Auto Build", "Done Building With Sawmill2", 25)
	end
	)
	
	Sawmill:Label("Sawmill2 Need For This Build: "..Sawmill2C)
	
	local Sawmill2Cound = Sawmill:Dropdown(
	"Current Sawmill2 On Base",
	{0},
	function()
	end)
	
	Sawmill:Seperator()
	
	Sawmill:Button(
	"AutoBuild Sawmill3",
	function()
	Sawmill3B()
	Noti("Auto Build", "Done Building With Sawmill3", 25)
	end
	)
	
	Sawmill:Label("Sawmill3 Need For This Build: "..Sawmill3C)
	
	local Sawmill3Cound = Sawmill:Dropdown(
	"Current Sawmill3 On Base",
	{0},
	function()
	end)
	
	Sawmill:Seperator()
	
	Sawmill:Button(
	"AutoBuild Sawmill4",
	function()
	Sawmill4B()
	Noti("Auto Build", "Done Building With Sawmill4", 25)
	end
	)
	
	Sawmill:Label("Sawmill4 Need For This Build: "..Sawmill4C)
	
	local Sawmill4Cound = Sawmill:Dropdown(
	"Current Sawmill4 On Base",
	{0},
	function()
	end)
	
	Sawmill:Seperator()
	
	Sawmill:Button(
	"AutoBuild Sawmill4L",
	function()
	Sawmill5B()
	Noti("Auto Build", "Done Building With Sawmill4L", 25)
	end
	)
	
	Sawmill:Label("Sawmill4L Need For This Build: "..Sawmill5C)
	
	local Sawmill5Cound = Sawmill:Dropdown(
	"Current Sawmill4L On Base",
	{0},
	function()
	end)
	
	
	
	
	local ABPaintings = win:Server("Paintings", "")
	
	local Paintings = ABPaintings:Channel("Paintings")
	
	Paintings:Button(
	"AutoBuild Painting1",
	function()
	Painting1B()
	Noti("Auto Build", "Done Building With Painting1", 25)
	end
	)
	
	Paintings:Label("Painting1 Need For This Build: "..Painting1C)
	
	local Painting1Count = Paintings:Dropdown(
	"Current Painting1 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting2",
	function()
	Painting2B()
	Noti("Auto Build", "Done Building With Painting2", 25)
	end
	)
	
	Paintings:Label("Painting2 Need For This Build: "..Painting2C)
	
	local Painting2Count = Paintings:Dropdown(
	"Current Painting2 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting3",
	function()
	Painting3B()
	Noti("Auto Build", "Done Building With Painting3", 25)
	end
	)
	
	Paintings:Label("Painting3 Need For This Build: "..Painting3C)
	
	local Painting3Count = Paintings:Dropdown(
	"Current Painting3 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting4",
	function()
	Painting4B()
	Noti("Auto Build", "Done Building With Painting4", 25)
	end
	)
	
	Paintings:Label("Painting4 Need For This Build: "..Painting4C)
	
	local Painting4Count = Paintings:Dropdown(
	"Current Painting4 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting5",
	function()
	Painting5B()
	Noti("Auto Build", "Done Building With Painting5", 25)
	end
	)
	
	Paintings:Label("Painting5 Need For This Build: "..Painting5C)
	
	local Painting5Count = Paintings:Dropdown(
	"Current Painting5 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting6",
	function()
	Painting6B()
	Noti("Auto Build", "Done Building With Painting6", 25)
	end
	)
	
	Paintings:Label("Painting6 Need For This Build: "..Painting6C)
	
	local Painting6Count = Paintings:Dropdown(
	"Current Painting6 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting7",
	function()
	Painting7B()
	Noti("Auto Build", "Done Building With Painting7", 25)
	end
	)
	
	Paintings:Label("Painting7 Need For This Build: "..Painting7C)
	
	local Painting7Count = Paintings:Dropdown(
	"Current Painting7 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting8",
	function()
	Painting8B()
	Noti("Auto Build", "Done Building With Painting8", 25)
	end
	)
	
	Paintings:Label("Painting8 Need For This Build: "..Painting8C)
	
	local Painting8Count = Paintings:Dropdown(
	"Current Painting8 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting9",
	function()
	Painting9B()
	Noti("Auto Build", "Done Building With Painting9", 25)
	end
	)
	
	Paintings:Label("Painting9 Need For This Build: "..Painting9C)
	
	local Painting9Count = Paintings:Dropdown(
	"Current Painting9 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting10",
	function()
	Painting10B()
	Noti("Auto Build", "Done Building With Painting10", 25)
	end
	)
	
	Paintings:Label("Painting10 Need For This Build: "..Painting10C)
	
	local Painting10Count = Paintings:Dropdown(
	"Current Painting10 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting11",
	function()
	Painting11B()
	Noti("Auto Build", "Done Building With Painting11", 25)
	end
	)
	
	Paintings:Label("Painting11 Need For This Build: "..Painting11C)
	
	local Painting11Count = Paintings:Dropdown(
	"Current Painting11 On Base",
	{0},
	function()
	end)
	
	Paintings:Seperator()
	
	
	Paintings:Button(
	"AutoBuild Painting12",
	function()
	Painting12B()
	Noti("Auto Build", "Done Building With Painting12", 25)
	end
	)
	
	Paintings:Label("Painting12 Need For This Build: "..Painting12C)
	
	local Painting12Count = Paintings:Dropdown(
	"Current Painting12 On Base",
	{0},
	function()
	end)
	
	
	local ABLights = win:Server("Lights", "")
	
	local Lights = ABLights:Channel("Paintings")
	
	
	Lights:Button(
	"AutoBuild Lamp1",
	function()
	Lamp1B()
	Noti("Auto Build", "Done Building With Lamp1", 25)
	end
	)
	
	Lights:Label("Lamp1 Need For This Build: "..Lamp1C)
	
	local Lamp1Count = Lights:Dropdown(
	"Current Lamp1 On Base",
	{0},
	function()
	end)
	
	Lights:Seperator()
	
	
	Lights:Button(
	"AutoBuild FloorLamp1",
	function()
	FloorLamp1B()
	Noti("Auto Build", "Done Building With FloorLamp1", 25)
	end
	)
	
	Lights:Label("FloorLamp1 Need For This Build: "..FloorLamp1C)
	
	local FloorLamp1Count = Lights:Dropdown(
	"Current FloorLamp1 On Base",
	{0},
	function()
	end)
	
	Lights:Seperator()
	
	Lights:Button(
	"AutoBuild WallLight1",
	function()
	WallLight1B()
	Noti("Auto Build", "Done Building With WallLight1", 25)
	end
	)
	
	Lights:Label("WallLight1 Need For This Build: "..WallLight1C)
	
	local WallLight1Count = Lights:Dropdown(
	"Current WallLight1 On Base",
	{0},
	function()
	end)
	
	Lights:Seperator()
	
	Lights:Button(
	"AutoBuild WallLight2",
	function()
	WallLight2B()
	Noti("Auto Build", "Done Building With WallLight2", 25)
	end
	)
	
	Lights:Label("WallLight2 Need For This Build: "..WallLight2C)
	
	local WallLight2Count = Lights:Dropdown(
	"Current WallLight2 On Base",
	{0},
	function()
	end)
	
	
	
	local ABFurn = win:Server("furniture", "")
	
	local furniture = ABFurn:Channel("furniture")
	
	furniture:Button(
	"AutoBuild Couch",
	function()
	CouchB()
	Noti("Auto Build", "Done Building With Couch", 25)
	end
	)
	
	furniture:Label("Couch Need For This Build: "..CouchC)
	
	local CouchCount = furniture:Dropdown(
	"Current Couch On Base",
	{0},
	function()
	end)
	
	furniture:Seperator()
	
	furniture:Button(
	"AutoBuild ArmChair",
	function()
	Chair1B()
	Noti("Auto Build", "Done Building With ArmChair", 25)
	end
	)
	
	furniture:Label("ArmChair Need For This Build: "..Chair1C)
	
	local Chair1Count = furniture:Dropdown(
	"Current ArmChair On Base",
	{0},
	function()
	end)
	
	furniture:Seperator()
	
	furniture:Button(
	"AutoBuild LoveSeat",
	function()
	Chair2B()
	Noti("Auto Build", "Done Building With LoveSeat", 25)
	end
	)
	
	furniture:Label("LoveSeat Need For This Build: "..Chair2C)
	
	local Chair2Count = furniture:Dropdown(
	"Current LoveSeat On Base",
	{0},
	function()
	end)
	
	furniture:Seperator()
	
	furniture:Button(
	"AutoBuild Bed1",
	function()
	Bed1B()
	Noti("Auto Build", "Done Building With Bed1", 25)
	end
	)
	
	furniture:Label("Bed1 Need For This Build: "..Bed1C)
	
	local Bed1Count = furniture:Dropdown(
	"Current Bed1 On Base",
	{0},
	function()
	end)
	
	furniture:Seperator()
	
	furniture:Button(
	"AutoBuild Bed2",
	function()
	Bed2B()
	Noti("Auto Build", "Done Building With Bed2", 25)
	end
	)
	
	furniture:Label("Bed2 Need For This Build: "..Bed2C)
	
	local Bed2Count = furniture:Dropdown(
	"Current Bed2 On Base",
	{0},
	function()
	end)
	
	furniture:Seperator()
	
	furniture:Button(
	"AutoBuild Toilet",
	function()
	ToiletB()
	Noti("Auto Build", "Done Building With Toilet", 25)
	end
	)
	
	furniture:Label("Toilet Need For This Build: "..ToiletC)
	
	local ToiletCount = furniture:Dropdown(
	"Current Toilet On Base",
	{0},
	function()
	end)
	
	furniture:Seperator()
	
	furniture:Button(
	"AutoBuild ToiletGold",
	function()
	ToiletGoldB()
	Noti("Auto Build", "Done Building With ToiletGold", 25)
	end
	)
	
	furniture:Label("ToiletGold Need For This Build: "..ToiletGoldC)
	
	local ToiletGoldCount = furniture:Dropdown(
	"Current ToiletGold On Base",
	{0},
	function()
	end)
	
	furniture:Seperator()
	
	furniture:Button(
	"AutoBuild Stove",
	function()
	StoveB()
	Noti("Auto Build", "Done Building With Stove", 25)
	end
	)
	
	furniture:Label("Stove Need For This Build: "..StoveC)
	
	local StoveCount = furniture:Dropdown(
	"Current Stove On Base",
	{0},
	function()
	end)
	
	furniture:Seperator()
	
	furniture:Button(
	"AutoBuild Dishwasher",
	function()
	DishwasherB()
	Noti("Auto Build", "Done Building With Dishwasher", 25)
	end
	)
	
	furniture:Label("Dishwasher Need For This Build: "..DishwasherC)
	
	local FridgeCount = furniture:Dropdown(
	"Current Fridge On Base",
	{0},
	function()
	end)
	
	furniture:Seperator()
	
	furniture:Button(
	"AutoBuild Fridge",
	function()
	FridgeB()
	Noti("Auto Build", "Done Building With Fridge", 25)
	end
	)
	
	furniture:Label("Fridge Need For This Build: "..FridgeC)
	
	local FridgeCount = furniture:Dropdown(
	"Current Fridge On Base",
	{0},
	function()
	end)
	
	
	
	local ABConveyors = win:Server("Conveyors", "")
	
	local Conveyors = ABConveyors:Channel("Conveyors")
	
	Conveyors:Button(
	"AutoBuild StraightConveyor",
	function()
	StraightConveyorB()
	Noti("Auto Build", "Done Building With StraightConveyor", 25)
	end
	)
	
	Conveyors:Label("StraightConveyor Need For This Build: "..StraightConveyorC)
	
	local StraightConveyorCount = Conveyors:Dropdown(
	"Current StraightConveyor On Base",
	{0},
	function()
	end)
	
	Conveyors:Seperator()
	
	Conveyors:Button(
	"AutoBuild TightTurnConveyor",
	function()
	TightTurnConveyorB()
	Noti("Auto Build", "Done Building With TightTurnConveyor", 25)
	end
	)
	
	Conveyors:Label("TightTurnConveyor Need For This Build: "..TightTurnConveyorC)
	
	local TightTurnConveyorCount = Conveyors:Dropdown(
	"Current TightTurnConveyor On Base",
	{0},
	function()
	end)
	
	Conveyors:Seperator()
	
	Conveyors:Button(
	"AutoBuild TiltConveyor",
	function()
	TiltConveyorB()
	Noti("Auto Build", "Done Building With TiltConveyor", 25)
	end
	)
	
	Conveyors:Label("TiltConveyor Need For This Build: "..TiltConveyorC)
	
	local TiltConveyorCount = Conveyors:Dropdown(
	"Current TiltConveyor On Base",
	{0},
	function()
	end)
	
	Conveyors:Seperator()
	
	Conveyors:Button(
	"AutoBuild ConveyorFunnel",
	function()
	ConveyorFunnelB()
	Noti("Auto Build", "Done Building With ConveyorFunnel", 25)
	end
	)
	
	Conveyors:Label("ConveyorFunnel Need For This Build: "..ConveyorFunnelC)
	
	local ConveyorFunnelCount = Conveyors:Dropdown(
	"Current ConveyorFunnel On Base",
	{0},
	function()
	end)
	
	Conveyors:Seperator()
	
	Conveyors:Button(
	"AutoBuild ConveyorSwitch",
	function()
	ConveyorSwitchB()
	Noti("Auto Build", "Done Building With ConveyorSwitch", 25)
	end
	)
	
	Conveyors:Label("ConveyorSwitch Need For This Build: "..ConveyorSwitchC)
	
	local ConveyorSwitchCount = Conveyors:Dropdown(
	"Current ConveyorSwitch On Base",
	{0},
	function()
	end)
	
	Conveyors:Seperator()
	
	Conveyors:Button(
	"AutoBuild LogSweeper",
	function()
	LogSweeperB()
	Noti("Auto Build", "Done Building With LogSweeper", 25)
	end
	)
	
	Conveyors:Label("LogSweeper Need For This Build: "..LogSweeperC)
	
	local LogSweeperCount = Conveyors:Dropdown(
	"Current LogSweeper On Base",
	{0},
	function()
	end)
	
	Conveyors:Seperator()
	
	Conveyors:Button(
	"AutoBuild StraightSwitchConveyorRight",
	function()
	StraightSwitchConveyorRightB()
	Noti("Auto Build", "Done Building With StraightSwitchConveyorRight", 25)
	end
	)
	
	Conveyors:Label("StraightSwitchConveyorRight Need For This Build: "..StraightSwitchConveyorRightC)
	
	local StraightSwitchConveyorRightCount = Conveyors:Dropdown(
	"Current StraightSwitchConveyorRight On Base",
	{0},
	function()
	end)
	
	Conveyors:Seperator()
	
	Conveyors:Button(
	"AutoBuild StraightSwitchConveyorLeft",
	function()
	StraightSwitchConveyorLeftB()
	Noti("Auto Build", "Done Building With StraightSwitchConveyorLeft", 25)
	end
	)
	
	Conveyors:Label("StraightSwitchConveyorLeft Need For This Build: "..StraightSwitchConveyorLeftC)
	
	local StraightSwitchConveyorLeftCount = Conveyors:Dropdown(
	"Current StraightSwitchConveyorLeft On Base",
	{0},
	function()
	end)
	
	
	
	local ABCars = win:Server("Cars", "")
	
	local Cars = ABCars:Channel("Cars")
	
	Cars:Button(
	"AutoBuild Pickup1",
	function()
	Pickup1B()
	Noti("Auto Build", "Done Building With Pickup1", 25)
	end
	)
	
	Cars:Label("Pickup1 Need For This Build: "..Pickup1C)
	
	local Pickup1Count = Cars:Dropdown(
	"Current Pickup1 On Base",
	{0},
	function()
	end)
	
	Cars:Seperator()
	
	Cars:Button(
	"AutoBuild UtilityTruck2",
	function()
	UtilityTruck2B()
	Noti("Auto Build", "Done Building With UtilityTruck2", 25)
	end
	)
	
	Cars:Label("UtilityTruck2 Need For This Build: "..UtilityTruck2C)
	
	local UtilityTruck2Count = Cars:Dropdown(
	"Current UtilityTruck2 On Base",
	{0},
	function()
	end)
	
	Cars:Seperator()
	
	Cars:Button(
	"AutoBuild UtilityTruck",
	function()
	UtilityTruckB()
	Noti("Auto Build", "Done Building With UtilityTruck", 25)
	end
	)
	
	Cars:Label("UtilityTruck Need For This Build: "..UtilityTruckC)
	
	local UtilityTruckCount = Cars:Dropdown(
	"Current UtilityTruck On Base",
	{0},
	function()
	end)
	
	Cars:Seperator()
	
	Cars:Button(
	"AutoBuild Trailer2",
	function()
	Trailer2B()
	Noti("Auto Build", "Done Building With Trailer2", 25)
	end
	)
	
	Cars:Label("Trailer2 Need For This Build: "..Trailer2C)
	
	local Trailer2Count = Cars:Dropdown(
	"Current Trailer2 On Base",
	{0},
	function()
	end)
	
	Cars:Seperator()
	
	Cars:Button(
	"AutoBuild Sleigh",
	function()
	SleighB()
	Noti("Auto Build", "Done Building With Sleigh", 25)
	end
	)
	
	Cars:Label("Sleigh Need For This Build: "..SleighC)
	
	local SleighCount = Cars:Dropdown(
	"Current Sleigh On Base",
	{0},
	function()
	end)
	
	Cars:Seperator()
	
	Cars:Button(
	"AutoBuild Snowmobile",
	function()
	SnowmobileB()
	Noti("Auto Build", "Done Building With Snowmobile", 25)
	end
	)
	
	Cars:Label("Snowmobile Need For This Build: "..SnowmobileC)
	
	local SnowmobileCount = Cars:Dropdown(
	"Current Snowmobile On Base",
	{0},
	function()
	end)
	
	Cars:Seperator()
	
	Cars:Button(
	"AutoBuild SmallTrailer",
	function()
	SmallTrailerB()
	Noti("Auto Build", "Done Building With SmallTrailer", 25)
	end
	)
	
	Cars:Label("SmallTrailer Need For This Build: "..SmallTrailerC)
	
	local SmallTrailerCount = Cars:Dropdown(
	"Current SmallTrailer On Base",
	{0},
	function()
	end)
	
	
	local ABLogic = win:Server("Logic", "")
	
	local Logic = ABLogic:Channel("Logic")
	
	
	Logic:Button(
	"AutoBuild ChopSaw",
	function()
	ChopSawB()
	Noti("Auto Build", "Done Building With ChopSaw", 25)
	end
	)
	
	Logic:Label("ChopSaw Need For This Build: "..ChopSawC)
	
	local ChopSawCount = Logic:Dropdown(
	"Current ChopSaw On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild FireworkLauncher",
	function()
	FireworkLauncherB()
	Noti("Auto Build", "Done Building With FireworkLauncher", 25)
	end
	)
	
	Logic:Label("FireworkLauncher Need For This Build: "..FireworkLauncherC)
	
	local FireworkLauncherCount = Logic:Dropdown(
	"Current FireworkLauncher On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild WoodChecker",
	function()
	WoodCheckerB()
	Noti("Auto Build", "Done Building With WoodChecker", 25)
	end
	)
	
	Logic:Label("WoodChecker Need For This Build: "..WoodCheckerC)
	
	local WoodCheckerCount = Logic:Dropdown(
	"Current WoodChecker On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild Laser",
	function()
	LaserB()
	Noti("Auto Build", "Done Building With Laser", 25)
	end
	)
	
	Logic:Label("Laser Need For This Build: "..LaserC)
	
	local LaserCount = Logic:Dropdown(
	"Current Laser On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild LaserReceiver",
	function()
	LaserReceiverB()
	Noti("Auto Build", "Done Building With LaserReceiver", 25)
	end
	)
	
	Logic:Label("LaserReceiver Need For This Build: "..LaserReceiverC)
	
	local LaserReceiverCount = Logic:Dropdown(
	"Current LaserReceiver On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild GateNOT",
	function()
	GateNOTB()
	Noti("Auto Build", "Done Building With GateNOT", 25)
	end
	)
	
	Logic:Label("GateNOT Need For This Build: "..GateNOTC)
	
	local GateNOTCount = Logic:Dropdown(
	"Current GateNOT On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild GateOR",
	function()
	GateORB()
	Noti("Auto Build", "Done Building With GateOR", 25)
	end
	)
	
	Logic:Label("GateOR Need For This Build: "..GateORC)
	
	local GateORCount = Logic:Dropdown(
	"Current GateOR On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild GateAND",
	function()
	GateANDB()
	Noti("Auto Build", "Done Building With GateAND", 25)
	end
	)
	
	Logic:Label("GateAND Need For This Build: "..GateANDC)
	
	local GateANDCount = Logic:Dropdown(
	"Current GateAND On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild GateXOR",
	function()
	GateXORB()
	Noti("Auto Build", "Done Building With GateXOR", 25)
	end
	)
	
	Logic:Label("GateXOR Need For This Build: "..GateXORC)
	
	local GateXORCount = Logic:Dropdown(
	"Current GateXOR On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild SignalSustain",
	function()
	SignalSustainB()
	Noti("Auto Build", "Done Building With SignalSustain", 25)
	end
	)
	
	Logic:Label("SignalSustain Need For This Build: "..SignalSustainC)
	
	local SignalSustainCount = Logic:Dropdown(
	"Current SignalSustain On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild SignalDelay",
	function()
	SignalDelayB()
	Noti("Auto Build", "Done Building With SignalDelay", 25)
	end
	)
	
	Logic:Label("SignalDelay Need For This Build: "..SignalDelayC)
	
	local SignalDelayCount = Logic:Dropdown(
	"Current SignalDelay On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild ClockSwitch",
	function()
	ClockSwitchB()
	Noti("Auto Build", "Done Building With ClockSwitch", 25)
	end
	)
	
	Logic:Label("ClockSwitch Need For This Build: "..ClockSwitchC)
	
	local ClockSwitchCount = Logic:Dropdown(
	"Current ClockSwitch On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild PressurePlate",
	function()
	PressurePlateB()
	Noti("Auto Build", "Done Building With PressurePlate", 25)
	end
	)
	
	Logic:Label("PressurePlate Need For This Build: "..PressurePlateC)
	
	local PressurePlateCount = Logic:Dropdown(
	"Current PressurePlate On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild Hatch",
	function()
	HatchB()
	Noti("Auto Build", "Done Building With Hatch", 25)
	end
	)
	
	Logic:Label("Hatch Need For This Build: "..HatchC)
	
	local HatchCount = Logic:Dropdown(
	"Current Hatch On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild Lever0",
	function()
	Lever0B()
	Noti("Auto Build", "Done Building With Lever0", 25)
	end
	)
	
	Logic:Label("Lever0 Need For This Build: "..Lever0C)
	
	local Lever0Count = Logic:Dropdown(
	"Current Lever0 On Base",
	{0},
	function()
	end)
	
	Logic:Seperator()
	
	Logic:Button(
	"AutoBuild Button0",
	function()
		Button0B()
	Noti("Auto Build", "Done Building With Button0", 25)
	end
	)
	
	Logic:Label("Button0 Need For This Build: "..Button0C)
	
	local Button0Count = Logic:Dropdown(
	"Current Button0 On Base",
	{0},
	function()
	end)
	
	local ABSettings = win:Server("SETTINGS", "rbxassetid://6031280882")
	
	local Settings = ABSettings:Channel("SETTINGS")
	
	local PlayerList = {}
	for i,v in pairs(game:GetService("Players"):GetPlayers()) do
	table.insert(PlayerList,v.Name)
	end
	game.Players.ChildAdded:Connect(function(player)
	local name = player.Name
	table.insert(PlayerList,name)
	end)
	game.Players.ChildRemoved:Connect(function(player)
	local name = player.Name
	for i,v in pairs(PlayerList)do
	if v == name then  
	table.remove(PlayerList,i)
	end
	end
	end)
	
	Settings:Dropdown(
	"Select A Wood Base",
	PlayerList,
	function(value)
	WoodBase = value
	end)
	
	Settings:Button(
	"Load Wood Counter",
	function()
	WoodChecker()
	task.wait(.2)
	FirPlank:Clear()
	FirPlank:Add(FirPlanksBase)
	BirchPlank:Clear()
	BirchPlank:Add(BirchPlanksBase)
	CherryPlank:Clear()
	CherryPlank:Add(CherryPlanksBase)
	WalnutPlank:Clear()
	WalnutPlank:Add(WalnutPlanksBase)
	GenericPlank:Clear()
	GenericPlank:Add(GenericPlanksBase)
	OakPlank:Clear()
	OakPlank:Add(OakPlanksBase)
	PinePlank:Clear()
	PinePlank:Add(PinePlanksBase)
	PalmPlank:Clear()
	PalmPlank:Add(PalmPlanksBase)
	KoaPlank:Clear()
	KoaPlank:Add(KoaPlanksBase)
	VolcanoPlank:Clear()
	VolcanoPlank:Add(VolcanoPlanksBase)
	GreenSwampyPlank:Clear()
	GreenSwampyPlank:Add(GreenSwampyPlanksBase)
	GoldSwampyPlank:Clear()
	GoldSwampyPlank:Add(GoldSwampyPlanksBase)
	SnowGlowPlank:Clear()
	SnowGlowPlank:Add(SnowGlowPlanksBase)
	FrostPlank:Clear()
	FrostPlank:Add(FrostPlanksBase)
	CaveCrawlerPlank:Clear()
	CaveCrawlerPlank:Add(CaveCrawlerPlanksBase)
	LoneCavePlank:Clear()
	LoneCavePlank:Add(LoneCavePlanksBase)
	SpookyPlank:Clear()
	SpookyPlank:Add(SpookyPlanksBase)
	SpookyNeonPlank:Clear()
	SpookyNeonPlank:Add(SpookyNeonPlanksBase)
	BlueSprucePlank:Clear()
	BlueSprucePlank:Add(BlueSprucePlanksBase)
	GlassCound:Clear()
	GlassCound:Add(GlassPaneBase)
	Glass2Cound:Clear()
	Glass2Cound:Add(GlassPane2Base)
	Glass3Cound:Clear()
	Glass3Cound:Add(GlassPane3Base)
	Glass4Cound:Clear()
	Glass4Cound:Add(GlassPane4Base)
	GlassDoorCound:Clear()
	GlassDoorCound:Add(GlassDoorBase)
	Painting1Count:Clear()
	Painting1Count:Add(Painting1Base)
	Painting2Count:Clear()
	Painting2Count:Add(Painting2Base)
	Painting3Count:Clear()
	Painting3Count:Add(Painting3Base)
	Painting4Count:Clear()
	Painting4Count:Add(Painting4Base)
	Painting5Count:Clear()
	Painting5Count:Add(Painting5Base)
	Painting6Count:Clear()
	Painting6Count:Add(Painting6Base)
	Painting7Count:Clear()
	Painting7Count:Add(Painting7Base)
	Painting8Count:Clear()
	Painting8Count:Add(Painting8Base)
	Painting9Count:Clear()
	Painting9Count:Add(Painting9Base)
	Painting10Count:Clear()
	Painting10Count:Add(Painting10Base)
	Painting11Count:Clear()
	Painting11Count:Add(Painting11Base)
	Painting12Count:Clear()
	Painting12Count:Add(Painting12Base)
	Lamp1Count:Clear()
	Lamp1Count:Add(Lamp1Base)
	FloorLamp1Count:Clear()
	FloorLamp1Count:Add(FloorLamp1Base)
	WallLight1Count:Clear()
	WallLight1Count:Add(WallLight1Base)
	WallLight2Count:Clear()
	WallLight2Count:Add(WallLight2Base)
	end
	)
	    ]]	    
	    	loadstring(game:HttpGet "https://raw.githubusercontent.com/666TranZit666/Interject/main/v1")()
	
